use("storage");
db.products.find();

// Expressão $add
// 1. Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_cost_price: {
        $add: ["$purchase_price", "$taxes"],
      },
    },
  },
]);

// Expressão $subtract
// 1. Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $subtract: [
          "$sale_price",
          { $add: ["$purchase_price", "$taxes"] },
        ],
      },
    },
  },
]);

// Expressão $round
// 1. Retorne o menor número inteiro relativo ao preço de venda de cada produto;
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      floored_price: { $floor: "$sale_price" },
    },
  },
]);

// 2. Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      ceiling_price: {
        $ceil: {
          $subtract: [
            "$sale_price",
            "$purchase_price",
          ],
        },
      },
    },
  },
]);

// Expressão $abs
// 1. Calcule o valor absoluto do lucro total de cada produto.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $abs: {
          $subtract: [
            "$sale_price",
            { $add: ["$purchase_price", "$taxes"] },
          ],
        },
      },
    },
  },
]);

// Expressão $multiply
// 1. Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_value: {
        $multiply: ["$quantity", "$purchase_price"],
      },
    },
  },
]);

// 2, Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $multiply: [
          "$quantity",
          {
            $subtract: [
              "$sale_price",
              { $add: ["$taxes", "$purchase_price"] },
            ],
          },
        ],
      },
    },
  },
]);

// Expressão $divide
// 1. Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.
use("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      new_price: {
        $divide: ["$sale_price", 2],
      },
    },
  },
]);
